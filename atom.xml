<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zero space</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://think1024.github.io/"/>
  <updated>2017-11-03T01:50:19.045Z</updated>
  <id>https://think1024.github.io/</id>
  
  <author>
    <name>Zero</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 实现 TCP/UDP client and server</title>
    <link href="https://think1024.github.io/2017/11/03/Java-%E5%AE%9E%E7%8E%B0-TCP-UDP-client-and-server/"/>
    <id>https://think1024.github.io/2017/11/03/Java-实现-TCP-UDP-client-and-server/</id>
    <published>2017-11-03T01:22:22.000Z</published>
    <updated>2017-11-03T01:50:19.045Z</updated>
    
    <content type="html"><![CDATA[<p>Java实现 TCP/UDP client和Server。</p><p>对于TCP Server有2个服务，一个生成4个随机字母，一个返回日期。</p><p>对于UDP Server，接收client发送的ip，然后会读取一个文件，文件中每一行是一条ip和houstName的对应的记录，  然后返回hostname.<br><a id="more"></a></p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>首先是TCP客户端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String host = <span class="string">"127.0.0.1"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">20018</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getService</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">Socket socket = <span class="keyword">new</span> Socket(host,port);</div><div class="line">System.out.println(<span class="string">"建立连接"</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">DataInputStream in = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</div><div class="line">DataOutputStream out = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</div><div class="line"></div><div class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">out.writeUTF(scanner.nextLine());</div><div class="line"></div><div class="line">System.out.println(<span class="string">"server =&gt; "</span>+in.readUTF());</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;<span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">socket.close();</div><div class="line">System.out.println(<span class="string">"关闭连接"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">System.out.println(<span class="string">"服务端关闭连接"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> TCPClient().getService();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>TCP服务端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">20018</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> TCPServer().service();</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//2种服务，1是随机4个字母，2是当前时间</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(port);</div><div class="line">System.out.println(<span class="string">"started ..."</span>);</div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">Socket socket = server.accept();</div><div class="line"><span class="comment">//接收一个请求后，就创建一个线程</span></div><div class="line">TCPServerThread st = <span class="keyword">new</span> TCPServerThread(socket);</div><div class="line"><span class="keyword">new</span> Thread(st).start();</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>TCPServerThread<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Socket socket;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> port= <span class="number">20018</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TCPServerThread</span><span class="params">(Socket socket)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.socket = socket;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">System.out.println(<span class="string">"新加入1个连接..."</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">DataInputStream in = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</div><div class="line">DataOutputStream out = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">String req = in.readUTF();</div><div class="line"><span class="keyword">if</span>(req.equals(<span class="string">"q"</span>)) &#123; <span class="comment">//断开连接</span></div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">String resp = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">switch</span>(req) &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</div><div class="line">resp = generate4char();</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</div><div class="line">resp = <span class="keyword">new</span> Date().toString();</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span> :</div><div class="line">resp =<span class="string">"请输入1或2,退出输入q"</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">out.writeUTF(resp);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">System.out.println(<span class="string">"关闭1个连接..."</span>);</div><div class="line">socket.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回随机生成的4个字母</span></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">generate4char</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">Random r = <span class="keyword">new</span> Random();</div><div class="line"></div><div class="line"><span class="keyword">char</span> c1 = (<span class="keyword">char</span>)(r.nextInt(<span class="number">26</span>)+<span class="number">97</span>);</div><div class="line"><span class="keyword">char</span> c2 = (<span class="keyword">char</span>)(r.nextInt(<span class="number">26</span>)+<span class="number">97</span>);</div><div class="line"><span class="keyword">char</span> c3 = (<span class="keyword">char</span>)(r.nextInt(<span class="number">26</span>)+<span class="number">97</span>);</div><div class="line"><span class="keyword">char</span> c4 = (<span class="keyword">char</span>)(r.nextInt(<span class="number">26</span>)+<span class="number">97</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(<span class="string">""</span>+c1+c2+c3+c4);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP和TCP有些区别，Socket变成了报文Socket，DatagramSocket，接收的数据不再是流，变成了DatagramPacket。</p><p>UDPClient<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPClient</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> port = <span class="number">20020</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">new</span> UDPClient().getService();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getService</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">DatagramSocket socket = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">InetAddress addr = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"请输入hostname:"</span>);</div><div class="line"><span class="comment">//从命令行读取数据</span></div><div class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">String str  = scanner.nextLine();</div><div class="line"></div><div class="line"><span class="keyword">byte</span>[] data = str.getBytes();</div><div class="line"></div><div class="line">socket = <span class="keyword">new</span> DatagramSocket();</div><div class="line"></div><div class="line"><span class="comment">//发送数据</span></div><div class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, data.length,addr,port);</div><div class="line">socket.send(packet);</div><div class="line"></div><div class="line"><span class="comment">//接收数据</span></div><div class="line"><span class="keyword">byte</span>[] data2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">DatagramPacket packet2 = <span class="keyword">new</span> DatagramPacket(data2, data2.length);</div><div class="line">socket.receive(packet2);</div><div class="line"></div><div class="line"><span class="comment">//显示接收的数据</span></div><div class="line">String info = <span class="keyword">new</span> String(data2);</div><div class="line">System.out.println(info);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">System.out.println(<span class="string">"遇到错误"</span>);</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="keyword">if</span>(socket != <span class="keyword">null</span> ) &#123;</div><div class="line">socket.close();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>UDPServer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPServer</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> port = <span class="number">20020</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> UDPServer().service();</div><div class="line">&#125;</div><div class="line"><span class="comment">//client发送ip，返回hostname</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">DatagramSocket socket = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">socket = <span class="keyword">new</span> DatagramSocket(port);</div><div class="line"><span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line"></div><div class="line">System.out.println(<span class="string">"started..."</span>);</div><div class="line"><span class="comment">//服务开启后一直运行</span></div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data,<span class="number">0</span>,data.length);</div><div class="line">socket.receive(packet);</div><div class="line"><span class="comment">//接收一个请求后，就创建一个线程</span></div><div class="line">UDPServerThread thread = <span class="keyword">new</span> UDPServerThread(socket, packet, data);</div><div class="line"><span class="keyword">new</span> Thread(thread).start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="keyword">if</span>(socket != <span class="keyword">null</span>) &#123;</div><div class="line">socket.close();</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"end..."</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>UDPServerThread<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPServerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> DatagramSocket socket;</div><div class="line"><span class="keyword">private</span> DatagramPacket packet;</div><div class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] data;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">UDPServerThread</span><span class="params">(DatagramSocket socket,DatagramPacket packet,<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.socket = socket;</div><div class="line"><span class="keyword">this</span>.packet = packet;</div><div class="line"><span class="keyword">this</span>.data = data;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//接收数据,将数据放到data里面</span></div><div class="line"></div><div class="line">String info = <span class="keyword">new</span>  String(data,<span class="number">0</span>,data.length);</div><div class="line"></div><div class="line">String resp = getHostname(info);</div><div class="line"></div><div class="line"><span class="comment">//发送数据到客户端</span></div><div class="line">InetAddress  addr = packet.getAddress();</div><div class="line"><span class="keyword">int</span> pt = packet.getPort();</div><div class="line"></div><div class="line"><span class="keyword">byte</span>[] dt = resp.getBytes();</div><div class="line"></div><div class="line">DatagramPacket pkt = <span class="keyword">new</span> DatagramPacket(dt,dt.length,addr,pt);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">socket.send(pkt);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getHostname</span><span class="params">(String info)</span> </span>&#123;</div><div class="line">info = info.trim();</div><div class="line">File file  = <span class="keyword">new</span> File(<span class="string">"hostname.txt"</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</div><div class="line">String line = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span> ) &#123;</div><div class="line">String[] record = line.trim().split(<span class="string">"\\s+"</span>);<span class="comment">// hostname 和ip,空格分隔</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(record[<span class="number">0</span>].trim().equals(info) ) &#123;</div><div class="line"><span class="keyword">return</span> record[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException fe) &#123;</div><div class="line">System.out.println(<span class="string">"没找到文件 "</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line"></div><div class="line">&#125; </div><div class="line"><span class="keyword">return</span> <span class="string">"not found"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过上面的代码可以看出TCP和UDP的一些区别，TCP是面向连接的，UDP是不连接的，TCP是字节流，UDP是报文。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java实现 TCP/UDP client和Server。&lt;/p&gt;
&lt;p&gt;对于TCP Server有2个服务，一个生成4个随机字母，一个返回日期。&lt;/p&gt;
&lt;p&gt;对于UDP Server，接收client发送的ip，然后会读取一个文件，文件中每一行是一条ip和houstName的对应的记录，  然后返回hostname.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://think1024.github.io/categories/Java/"/>
    
    
      <category term="TCP" scheme="https://think1024.github.io/tags/TCP/"/>
    
      <category term="UDP" scheme="https://think1024.github.io/tags/UDP/"/>
    
      <category term="Java" scheme="https://think1024.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>clojure note1</title>
    <link href="https://think1024.github.io/2017/09/21/clojure-note1/"/>
    <id>https://think1024.github.io/2017/09/21/clojure-note1/</id>
    <published>2017-09-21T13:21:56.000Z</published>
    <updated>2017-09-21T13:25:04.630Z</updated>
    
    <content type="html"><![CDATA[<p>clojure练习中的一些函数。<br><a id="more"></a></p><h2 id="1-vec-vector-list"><a href="#1-vec-vector-list" class="headerlink" title="1. vec vector list"></a>1. vec vector list</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">( = [ <span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span>] </div><div class="line">    ( list <span class="symbol">:a</span>  <span class="symbol">:b</span>  <span class="symbol">:c</span> ) </div><div class="line">    ( vec ' ( <span class="symbol">:a</span>  <span class="symbol">:b</span>  <span class="symbol">:c</span> ) ) </div><div class="line">    ( vector <span class="symbol">:a</span>  <span class="symbol">:b</span>  <span class="symbol">:c</span> ) )</div></pre></td></tr></table></figure><h2 id="2-conj-加入列表"><a href="#2-conj-加入列表" class="headerlink" title="2. conj 加入列表"></a>2. conj 加入列表</h2><p> vector 和 list 顺序不同，list在前面，vector在后面<br> conj set 没有顺序</p><h2 id="3-set-没有重复的"><a href="#3-set-没有重复的" class="headerlink" title="3. set 没有重复的  {}"></a>3. set 没有重复的  {}</h2> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#&#123;1 2 3 4&#125;</div><div class="line"></div><div class="line">(set '(1 2 3 4))</div></pre></td></tr></table></figure><h2 id="4-map"><a href="#4-map" class="headerlink" title="4. map"></a>4. map</h2> <figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">def</span></span> maap &#123;<span class="symbol">:a</span> <span class="number">1</span>,<span class="symbol">:b</span> <span class="number">2</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">;(:a maap) 等于 (maap :a) 前面后面都一样。</span></div></pre></td></tr></table></figure><h2 id="5-rest"><a href="#5-rest" class="headerlink" title="5. rest"></a>5. rest</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;返回除了第一个剩下的，格式为list</span></div></pre></td></tr></table></figure><h2 id="6-map"><a href="#6-map" class="headerlink" title="6. map"></a>6. map</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">map</span></span> fn sequence)</div><div class="line"><span class="comment">;sequence 可以是list vector set</span></div></pre></td></tr></table></figure><h2 id="7-循环"><a href="#7-循环" class="headerlink" title="7. 循环"></a>7. 循环</h2><ol><li>recur</li><li>loop</li></ol><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;累加器</span></div><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> fun [sum x]</div><div class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">pos?</span></span> x)</div><div class="line">        (<span class="name"><span class="builtin-name">recur</span></span> (<span class="name"><span class="builtin-name">+</span></span> sum x) (<span class="name"><span class="builtin-name">dec</span></span> x))</div><div class="line">        sum</div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure><h2 id="8-drop-n-seq"><a href="#8-drop-n-seq" class="headerlink" title="8. drop n seq"></a>8. drop n seq</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">drop</span></span> <span class="number">3</span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>])</div><div class="line"></div><div class="line"><span class="comment">;=&gt;(4 5 6)</span></div><div class="line"><span class="comment">;去掉seq的前n个</span></div></pre></td></tr></table></figure><h2 id="9-斐波那契数列"><a href="#9-斐波那契数列" class="headerlink" title="9. 斐波那契数列"></a>9. 斐波那契数列</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#(take %</div><div class="line">    ((fn fib []</div><div class="line">        (lazy-cat [1 1]</div><div class="line">        (map + (fib) (rest (fib)))</div><div class="line">    ))</div><div class="line">)</div></pre></td></tr></table></figure><h2 id="10-lazy-cat"><a href="#10-lazy-cat" class="headerlink" title="10. lazy-cat"></a>10. lazy-cat</h2><h2 id="11-apply"><a href="#11-apply" class="headerlink" title="11. apply"></a>11. apply</h2><p>将参数以list形式传给func，执行。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> func [a b c d] ())</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">apply</span></span> func [] arg0 arg1 arg2 arg3])</div></pre></td></tr></table></figure><h2 id="12-re-seq-正则"><a href="#12-re-seq-正则" class="headerlink" title="12 re-seq 正则"></a>12 re-seq 正则</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="name">re-seq</span> #<span class="string">"[A-Z]"</span> <span class="string">"abAB"</span>)</div><div class="line"></div><div class="line"><span class="comment">;=&gt;("A" "B")</span></div><div class="line"><span class="comment">;使用#"[A-Z]"来作为 pattern</span></div></pre></td></tr></table></figure><h2 id="13-partition-by"><a href="#13-partition-by" class="headerlink" title="13 partition-by"></a>13 partition-by</h2><p>令<code>func</code> 作用与 <code>seq</code> ，将连续的结果相同的一部分分为一组<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="name">partition-by</span> func seq)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;clojure练习中的一些函数。&lt;br&gt;
    
    </summary>
    
      <category term="clojure" scheme="https://think1024.github.io/categories/clojure/"/>
    
    
      <category term="clojure" scheme="https://think1024.github.io/tags/clojure/"/>
    
  </entry>
  
  <entry>
    <title>Map.Entry使用</title>
    <link href="https://think1024.github.io/2017/09/21/Map-Entry%E4%BD%BF%E7%94%A8/"/>
    <id>https://think1024.github.io/2017/09/21/Map-Entry使用/</id>
    <published>2017-09-21T13:21:28.000Z</published>
    <updated>2017-09-21T13:26:01.904Z</updated>
    
    <content type="html"><![CDATA[<p>关于Map.Entry的使用。<br><a id="more"></a><br>Map.Entry相当于把Map的Key和Value放在一个对象里面。<br>遍历的时候，不用再根据keySet的key，使用额外的一次map.getKey()来获得value。提高了效率。</p><p>如果只需要ValueSet的话，只需要foreach就可以了。</p><p>几种方法的比较。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> HashMap&lt;Object,Object&gt;();</div><div class="line"></div><div class="line"><span class="comment">//最原始的方法</span></div><div class="line">Iterator iterator = map.keySet().iterator();</div><div class="line"><span class="keyword">while</span>(iterator.hasNext()) &#123;</div><div class="line">Object key = iterator.next();</div><div class="line">Object val = map.get(key);</div><div class="line"><span class="comment">//....</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用foreach方法</span></div><div class="line"><span class="keyword">for</span>(Object key:map.keySet()) &#123;</div><div class="line">Object val = map.get(key);</div><div class="line"><span class="comment">//....</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用map.entry</span></div><div class="line"><span class="keyword">for</span>(Entry&lt;Object,Object&gt; entry: map.entrySet()) &#123;</div><div class="line">entry.getKey();</div><div class="line">entry.getValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Map.Entry的使用。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://think1024.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://think1024.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java 多维数组</title>
    <link href="https://think1024.github.io/2017/09/17/java-%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    <id>https://think1024.github.io/2017/09/17/java-多维数组/</id>
    <published>2017-09-17T13:42:37.000Z</published>
    <updated>2017-09-17T13:43:37.610Z</updated>
    
    <content type="html"><![CDATA[<p>java的多维数组是靠一维数组实现的。<br><a id="more"></a></p><p>多维数组可以看作是元素为数组的数组。比如arr[][],arr[] 的元素为数组的引用，可以说arr[]的元素就是二级数组的指针。</p><p>arr的第二维数组元素的长度都是随意的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][];<span class="comment">//第一个数2是必须的。</span></div><div class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>]; <span class="comment">//长度为2</span></div><div class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>]; <span class="comment">//长度为4</span></div><div class="line">   </div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; arr.length;i++)&#123;</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;arr[i].length; j++)&#123;</div><div class="line">        System.out.println(<span class="string">"arr["</span>+i+<span class="string">"]["</span>+j+<span class="string">"] = "</span>+ arr[i][j]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java的多维数组是靠一维数组实现的。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://think1024.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://think1024.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java 集合框架 1</title>
    <link href="https://think1024.github.io/2017/09/17/java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-1/"/>
    <id>https://think1024.github.io/2017/09/17/java-集合框架-1/</id>
    <published>2017-09-17T13:16:20.000Z</published>
    <updated>2017-09-17T13:18:12.445Z</updated>
    
    <content type="html"><![CDATA[<p>java Collection 中的 ArrayList 、LinkedList 、ArrayDeque。<br><a id="more"></a></p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>从名字可以看出是一个数组List，如果数组满了，在申请一个更大的数组，然后将原来的数据复制过去。新申请的空间是原来的3倍。</p><p>add()添加时，如果没有空间，需要自动扩容。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);<span class="comment">//新空间是原来的3倍</span></div><div class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">        newCapacity = minCapacity;</div><div class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">        newCapacity = hugeCapacity(minCapacity);</div><div class="line">    elementData = Arrays.copyOf(elementData, newCapacity);<span class="comment">//扩展空间并复制</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>remove(int index)后，后面的元素都要向前移动。<br>remove(Object o)时，删除第一个满足条件的。</p><p>当删除元素并移动后，最后一个位置要赋值为null，让GC起作用。不删除就不垃圾回收了吗？数组里面存储的只是对象的引用，对象实际都在堆中，只有堆中的对象没有被引用，GC才会起作用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    rangeCheck(index);</div><div class="line">    modCount++;</div><div class="line">    E oldValue = elementData(index);</div><div class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</div><div class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">//清除该位置的引用，让GC起作用</span></div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面的 <code>System.arraycopy()</code>是<code>native</code>方法，使用的是内存复制，对于大量数据时，效率比较高。</p><h2 id="LinkList"><a href="#LinkList" class="headerlink" title="LinkList"></a>LinkList</h2><p>linkList是双向链表,实现了<code>List&lt;E&gt;</code>, <code>Deque&lt;E&gt;</code>接口，等同Queue和Stack的功能。有一个内部类Node,链表由Node组成，每个Node有一个指向前一个节点的指针和指向后一个节点的指针。</p><p>对于栈和队列，首选是<code>ArrayDeque</code>, 其次是<code>LinkedList</code>。</p><h2 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h2><p>实现了<code>Deque</code> 接口。Deque接口的含义是double ended queue，<code>双端队列</code>，既能当Stack，又能当Queue,和LinkedList功能差不多，只不过一个是链表，一个是数组。</p><p>内部实现使用的是 <code>循环数组</code>，数组的最前面和最后面连接起来。例如，当压入堆栈时，前面没有空间了，在逻辑上，把后面接到前面，从最后继续。<br>这里的处理下标越界的代码很好。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    elements[head = (head - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)] = e;<span class="comment">//处理下标越界</span></div><div class="line">    <span class="keyword">if</span> (head == tail)<span class="comment">//空间不够用</span></div><div class="line">        doubleCapacity();<span class="comment">//扩容</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>elements.length</code>是2的倍数，和head-1 &amp; 操作，相当于对 head-1 取余。</p><p>当删除并返回deque的head处的元素时，也要处理下标问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    E result = elements[head];</div><div class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>)<span class="comment">//null值意味着deque为空</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    elements[h] = <span class="keyword">null</span>;<span class="comment">//let GC work</span></div><div class="line">    head = (head + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);<span class="comment">//这里的是 head+1</span></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当没有空间时，将重新申请一个2倍的数组，并将循环数组的数据分为连续的两次复制到新数组中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java Collection 中的 ArrayList 、LinkedList 、ArrayDeque。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://think1024.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://think1024.github.io/tags/java/"/>
    
      <category term="数据结构" scheme="https://think1024.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="集合框架" scheme="https://think1024.github.io/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>RESTful</title>
    <link href="https://think1024.github.io/2017/09/10/RESTful/"/>
    <id>https://think1024.github.io/2017/09/10/RESTful/</id>
    <published>2017-09-10T05:52:28.000Z</published>
    <updated>2017-09-10T05:52:28.362Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java Lambda表达式</title>
    <link href="https://think1024.github.io/2017/09/10/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://think1024.github.io/2017/09/10/Lambda表达式/</id>
    <published>2017-09-10T03:45:53.000Z</published>
    <updated>2017-09-10T05:51:48.489Z</updated>
    
    <content type="html"><![CDATA[<p>关于 lambda表达式。<br><a id="more"></a></p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda表达式就是将函数作为参数传给另一个函数（方法）。<br>因为有时候有的函数方法只会使用一次，单独拿出来声明意义不大，最好将其作为匿名函数直接使用。<br>Lambda使用 <code>-&gt;</code> ，参数 -&gt; 代码块。<br>参数类型编译器会自己推断。<br>如果代码块只有一行，可以省略{} 和 return。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Arrays.asList(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>).forEach( e -&gt;&#123;</div><div class="line">         System.out.println(e)</div><div class="line">         System.out.println(e) </div><div class="line">         &#125;);</div><div class="line"></div><div class="line">Arrays.asList(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>).sort((e1,e2) -&gt; e1.compareTo(e2));</div></pre></td></tr></table></figure></p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 lambda表达式。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://think1024.github.io/categories/java/"/>
    
    
      <category term="java8" scheme="https://think1024.github.io/tags/java8/"/>
    
      <category term="编程语言" scheme="https://think1024.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>clojure学习 1</title>
    <link href="https://think1024.github.io/2017/09/04/clojure%E5%AD%A6%E4%B9%A0-1/"/>
    <id>https://think1024.github.io/2017/09/04/clojure学习-1/</id>
    <published>2017-09-04T12:33:50.000Z</published>
    <updated>2017-09-09T07:49:07.975Z</updated>
    
    <content type="html"><![CDATA[<p>clojure学习1<br><a id="more"></a></p><h2 id="1-vec-vector-list"><a href="#1-vec-vector-list" class="headerlink" title="1. vec vector list"></a>1. vec vector list</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">( = [ <span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span>] </div><div class="line">    ( list <span class="symbol">:a</span>  <span class="symbol">:b</span>  <span class="symbol">:c</span> ) </div><div class="line">    ( vec ' ( <span class="symbol">:a</span>  <span class="symbol">:b</span>  <span class="symbol">:c</span> ) ) </div><div class="line">    ( vector <span class="symbol">:a</span>  <span class="symbol">:b</span>  <span class="symbol">:c</span> ) )</div></pre></td></tr></table></figure><h2 id="2-conj-加入列表"><a href="#2-conj-加入列表" class="headerlink" title="2. conj 加入列表"></a>2. conj 加入列表</h2><p> vector 和 list 顺序不同，list在前面，vector在后面<br> conj set 没有顺序</p><h2 id="3-set-没有重复的"><a href="#3-set-没有重复的" class="headerlink" title="3. set 没有重复的  {}"></a>3. set 没有重复的  {}</h2> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#&#123;1 2 3 4&#125;</div><div class="line"></div><div class="line">(set '(1 2 3 4))</div></pre></td></tr></table></figure><h2 id="4-map"><a href="#4-map" class="headerlink" title="4. map"></a>4. map</h2> <figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">def</span></span> maap &#123;<span class="symbol">:a</span> <span class="number">1</span>,<span class="symbol">:b</span> <span class="number">2</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">;(:a maap) 等于 (maap :a) 前面后面都一样。</span></div></pre></td></tr></table></figure><h2 id="5-rest"><a href="#5-rest" class="headerlink" title="5. rest"></a>5. rest</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;返回除了第一个剩下的，格式为list</span></div></pre></td></tr></table></figure><h2 id="6-map"><a href="#6-map" class="headerlink" title="6. map"></a>6. map</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">map</span></span> fn sequence)</div><div class="line"><span class="comment">;sequence 可以是list vector set</span></div></pre></td></tr></table></figure><h2 id="7-循环"><a href="#7-循环" class="headerlink" title="7. 循环"></a>7. 循环</h2><ol><li>recur</li><li>loop</li></ol><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;累加器</span></div><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> fun [sum x]</div><div class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">pos?</span></span> x)</div><div class="line">        (<span class="name"><span class="builtin-name">recur</span></span> (<span class="name"><span class="builtin-name">+</span></span> sum x) (<span class="name"><span class="builtin-name">dec</span></span> x))</div><div class="line">        sum</div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure><h2 id="8-drop-n-seq"><a href="#8-drop-n-seq" class="headerlink" title="8. drop n seq"></a>8. drop n seq</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">drop</span></span> <span class="number">3</span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>])</div><div class="line"></div><div class="line"><span class="comment">;=&gt;(4 5 6)</span></div><div class="line"><span class="comment">;去掉seq的前n个</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;clojure学习1&lt;br&gt;
    
    </summary>
    
      <category term="clojure" scheme="https://think1024.github.io/categories/clojure/"/>
    
    
      <category term="clojure" scheme="https://think1024.github.io/tags/clojure/"/>
    
  </entry>
  
  <entry>
    <title>多线程2 Runnable&amp;Thread</title>
    <link href="https://think1024.github.io/2017/09/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B2-Runnable-Thread/"/>
    <id>https://think1024.github.io/2017/09/02/多线程2-Runnable-Thread/</id>
    <published>2017-09-02T05:55:00.000Z</published>
    <updated>2017-09-09T07:46:26.520Z</updated>
    
    <content type="html"><![CDATA[<p>runnable &amp; Thread<br><a id="more"></a></p><h2 id="thread-和-runnable-的区别"><a href="#thread-和-runnable-的区别" class="headerlink" title="thread 和 runnable 的区别"></a>thread 和 runnable 的区别</h2><h3 id="1-避免单继承的限制。"><a href="#1-避免单继承的限制。" class="headerlink" title="1. 避免单继承的限制。"></a>1. 避免单继承的限制。</h3><pre><code>Thread实现了Runnable的接口，继承了Thread的类不能继承其他类了。</code></pre><h3 id="2-共享资源。"><a href="#2-共享资源。" class="headerlink" title="2. 共享资源。"></a>2. 共享资源。</h3><pre><code>在Thread中，一个Thread 如果 start() 多次，会错误。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Thread1 t1 = <span class="keyword">new</span> Thread1(<span class="string">"a"</span>);</div><div class="line">t1.start();</div><div class="line">t2.start();</div></pre></td></tr></table></figure><p>在实现Runnable时，一个可以start() 多次。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MyThread t = <span class="keyword">new</span> MyThread(<span class="string">"a"</span>);</div><div class="line"><span class="keyword">new</span> Thread(t).start();</div><div class="line"><span class="keyword">new</span> Thread(t).start();</div></pre></td></tr></table></figure></p><p>所以实现了资源共享。</p><h2 id="Thread-join"><a href="#Thread-join" class="headerlink" title="Thread.join()"></a>Thread.join()</h2><p>join的意思是参加，<code>thread1.join()</code>意思是线程<code>thread1</code>参加进来。如果<code>thread2</code>正在执行，在<code>thread2</code> 里面调用<code>thread1.join()</code>,  <code>thread2</code> 就会等<code>thread1</code>执行完后再执行。</p><h2 id="Thread-yield"><a href="#Thread-yield" class="headerlink" title="Thread.yield()"></a>Thread.yield()</h2><p><code>Thread.yield()</code>会让当前线程暂停，进入可运行状态，然后线程调度程序从 处于可运行状态的线程中选择一个执行。</p><p>有可能一个线程<code>yield()</code>之后，被再一次选中执行。</p><h2 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait() notify()"></a>wait() notify()</h2><p><code>wait()</code>和<code>notify()</code>是<code>Object</code>的方法。</p><p><code>sleep()</code>和<code>yield()</code>是<code>Thread</code>的方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;runnable &amp;amp; Thread&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://think1024.github.io/tags/java/"/>
    
      <category term="多线程" scheme="https://think1024.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程1 synchronized</title>
    <link href="https://think1024.github.io/2017/09/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B1-synchronized/"/>
    <id>https://think1024.github.io/2017/09/02/多线程1-synchronized/</id>
    <published>2017-09-02T03:32:12.000Z</published>
    <updated>2017-09-09T07:47:33.167Z</updated>
    
    <content type="html"><![CDATA[<p>synchronized记录<br><a id="more"></a></p><h4 id="锁synchronized"><a href="#锁synchronized" class="headerlink" title="锁synchronized"></a>锁synchronized</h4><p>synchronized同步锁的作用范围有2种，分别是对象锁和类锁。</p><p>在方法上加<code>synchronized</code>和加代码块<code>synchronized(this)</code>的作用范围都是对象锁。</p><p>在静态方法上加<code>synchronized</code>和加代码块<code>synchronized(this)</code>的作用范围是类锁。、</p><p>类锁和对象锁之间互不影响，但是类锁和类锁、对象锁和对象锁之间有影响。</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>2个同步方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynProsess1</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SynProsess1</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</div><div class="line"><span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123;</div><div class="line">System.out.println(<span class="string">"test1 : "</span>+ i);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">Thread.sleep(<span class="number">100</span>);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</div><div class="line"><span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123;</div><div class="line">System.out.println(<span class="string">"test2 : "</span>+ i);</div><div class="line">            </div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">Thread.sleep(<span class="number">100</span>);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;         </div><div class="line"> e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SynProsess1 p1 = <span class="keyword">new</span> SynProsess1(<span class="string">"tom"</span>);</div><div class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">p1.test1();</div><div class="line">&#125;&#125;);</div><div class="line"></div><div class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">p1.test2();</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">t1.start();</div><div class="line">t2.start();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//运行结果。这两个方法一个执行完后，另一个才执行。</span></div><div class="line"><span class="comment">//</span></div></pre></td></tr></table></figure></p><p>同步方法和类同步代码块<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">///</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">synchronized</span>(SynDemo.class)&#123;</div><div class="line">        <span class="comment">///</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"><span class="comment">//类代码块相当于静态同步方法。</span></div><div class="line"><span class="comment">//test2等价于test3</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;synchronized记录&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://think1024.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://think1024.github.io/tags/java/"/>
    
      <category term="多线程" scheme="https://think1024.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>hibernate-1</title>
    <link href="https://think1024.github.io/2017/03/09/hibernate-1/"/>
    <id>https://think1024.github.io/2017/03/09/hibernate-1/</id>
    <published>2017-03-09T13:22:35.000Z</published>
    <updated>2017-09-09T07:48:47.929Z</updated>
    
    <content type="html"><![CDATA[<p>一些 <code>hibernate</code>问题<br><a id="more"></a></p><h2 id="1-hibernate包导入"><a href="#1-hibernate包导入" class="headerlink" title="1.hibernate包导入"></a>1.hibernate包导入</h2><p>lib/required 下<br>本身没有日志包，需要导入 log4j slf4j</p><h2 id="2-配置映射关系"><a href="#2-配置映射关系" class="headerlink" title="2.配置映射关系"></a>2.配置映射关系</h2><p>配置文件的名称和位置没要求，建议在实体类包里面<br>建议名称：<code>名称.hbm.xml</code><br><code>property</code> 中name和column相同时，可以省略column</p><h2 id="3-核心配置文件"><a href="#3-核心配置文件" class="headerlink" title="3.核心配置文件"></a>3.核心配置文件</h2><p>位置和名称固定<br>位置：src下<br>名称：hibernate.cfg.xml</p><p>配置信息写在<code>&lt;session-factory&gt;</code>标签下<br>hibernate只加载核心配置文件，映射配置文件要在核心文件里配置</p><ol><li>配置数据库</li><li>hibernate配置</li><li>加载映射文件</li></ol><h2 id="4-操作"><a href="#4-操作" class="headerlink" title="4. 操作"></a>4. 操作</h2><ol><li>加载hibernate核心配置文件</li><li>创建sessionFactory对象</li><li>使用sessionFactory创建session对象</li><li>开启事务</li><li>写crud操作（只有这个不固定）</li><li>提交事务</li><li>关闭资源</li></ol><h2 id="5-hibernate的api"><a href="#5-hibernate的api" class="headerlink" title="5.hibernate的api"></a>5.hibernate的api</h2><p>Configuration:<br>找到hibernate.cfg.xml配置文件，并加载到对象里面</p><p>SessionFactory:<br>到数据库根据映射关系，创建表<br>每次都要检查，浪费资源<br>一个项目中，创建一个SessionFactory对象</p><p>在工具类中，静态代码实现。</p><p>Session：<br>类似conncetion<br>实现crud<br>单线程对象，不能共用。</p><p>Transaction</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些 &lt;code&gt;hibernate&lt;/code&gt;问题&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://think1024.github.io/categories/java/"/>
    
    
      <category term="hibernate" scheme="https://think1024.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>arch安装</title>
    <link href="https://think1024.github.io/2017/02/22/arch%E5%AE%89%E8%A3%85/"/>
    <id>https://think1024.github.io/2017/02/22/arch安装/</id>
    <published>2017-02-22T12:38:47.000Z</published>
    <updated>2017-09-09T07:47:08.141Z</updated>
    
    <content type="html"><![CDATA[<p>arch安装记录<br><a id="more"></a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>使用vmware虚拟机安装<br>arch版本：archlinux-2017.02.01-dual.iso<br>新建虚拟机的时候vmware没有检测出archliunx系统，所以就直接选了<code>其他liunx3.x版</code></p><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><h4 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h4><p>archliunx 安装过程需要联网。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ping -c 4 baidu.com</div></pre></td></tr></table></figure></p><p>检查网络连接。4是发送4个数据包</p><h4 id="建立硬盘分区。"><a href="#建立硬盘分区。" class="headerlink" title="建立硬盘分区。"></a>建立硬盘分区。</h4><p>虚拟机总共分了10G。<br>可以使用fdisk或cfdisk，或其他的都可以。<br>这里用的是cfdisk.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># cfdisk</div></pre></td></tr></table></figure></p><p>首先选第一个gpt。<br>new第一个分区，大小1M，type是bios boot，这为后面安装grub准备。<br>new第二个分区，9G。<br>new第三个分区，默认剩余空间。<br>最后write。</p><p>一些其它命令：<br>fdisk -l /dev/sda   查看sda的分区。<br>fdisk /dev/sda   进入对sda进行操作的环境<br>n是创建新分区，之后一般默认，分区大小 +1G 等等</p><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><p>将sda1和sda2格式化为ext4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkfs.ext4 /dev/sda1</div><div class="line">mkfs.ext4 /dev/sda2</div></pre></td></tr></table></figure></p><p>格式swap分区,激活swap分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkswap /dev/sda3</div><div class="line">swapon /dev/sda3</div></pre></td></tr></table></figure></p><p>查看文件系统文件类型<br> <code>file -s /dev/sda1</code></p><h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><p>/dev/sda2 挂载到 根目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount /dev/sda2 /mnt</div></pre></td></tr></table></figure></p><p>创建/boot,将/dev/sda1挂载到 /boot<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /mnt/boot</div><div class="line">mount /dev/sda1 /mnt/boot</div></pre></td></tr></table></figure></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="选择镜像"><a href="#选择镜像" class="headerlink" title="选择镜像"></a>选择镜像</h4><p>编辑/etc/pacman.d/mirrorlist，将选择的mirror放到最上面，或者把文件备份，源文件只保留需要的mirror<br>修改完后，更新源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pacman -Syy</div></pre></td></tr></table></figure></p><h4 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pacstrap -i /mnt base base-devel</div></pre></td></tr></table></figure><h4 id="Fstab"><a href="#Fstab" class="headerlink" title="Fstab"></a>Fstab</h4><p>生成系统中的文件系统信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</div></pre></td></tr></table></figure></p><h4 id="Chroot"><a href="#Chroot" class="headerlink" title="Chroot"></a>Chroot</h4><p>Change root 到新安装的系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arch-chroot /mnt /bin/bash</div></pre></td></tr></table></figure></p><h4 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h4><p>设置标准时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hwclock --systohc --utc</div></pre></td></tr></table></figure></p><p>设置语言<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vi /etc/locale.gen</div><div class="line">locale-gen</div><div class="line"></div><div class="line">echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</div></pre></td></tr></table></figure></p><p>设置主机名</p><p>设置 hostname，将其添加到/etc/hostname。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo myhostname &gt; /etc/hostname</div></pre></td></tr></table></figure></p><p>设置root密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd</div></pre></td></tr></table></figure></p><h4 id="安装Grub"><a href="#安装Grub" class="headerlink" title="安装Grub"></a>安装Grub</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pacman -S grub</div><div class="line">grub-install --target=i386-pc --recheck /dev/sda</div><div class="line">grub-mkconfig -o /boot/grub/grub.cfg</div></pre></td></tr></table></figure><h4 id="卸载分区"><a href="#卸载分区" class="headerlink" title="卸载分区"></a>卸载分区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exit</div><div class="line">umount /mnt</div><div class="line">reboot</div></pre></td></tr></table></figure><h4 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h4><h3 id="安装中的问题"><a href="#安装中的问题" class="headerlink" title="安装中的问题"></a>安装中的问题</h3><p>在第一次grub安装时出现错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">grub-install --target=i386-pc /dev/sda</div><div class="line">grub-install: warning: this GPT partition label contains no BIOS Boot Partition; embedding won&apos;t be possible.</div><div class="line">grub-install: warning: Embedding is not possible. GRUB can only be installed in this setup by using blocklists. However, blocklists are UNRELIABLE and their use is discouraged..</div><div class="line">grub-install: error: will not proceed with blocklists.</div></pre></td></tr></table></figure></p><p>解决方法<br>之前在分区的时候，没有首先分一个1M大小的<code>bios boot</code>类型分区，导致grub安装失败。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;arch安装记录&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://think1024.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://think1024.github.io/tags/linux/"/>
    
      <category term="arch" scheme="https://think1024.github.io/tags/arch/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记1</title>
    <link href="https://think1024.github.io/2017/02/09/Java%E7%AC%94%E8%AE%B01/"/>
    <id>https://think1024.github.io/2017/02/09/Java笔记1/</id>
    <published>2017-02-09T06:23:46.000Z</published>
    <updated>2017-09-09T07:48:01.190Z</updated>
    
    <content type="html"><![CDATA[<p>一些bug<br><a id="more"></a><br>java学习遇到的一些bug</p><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p><code>问题</code><br>今天学习Mybatis，tomcat8运行时错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol pause</div><div class="line">信息: Pausing ProtocolHandler [&quot;http-nio-8080&quot;]</div><div class="line">二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol pause</div><div class="line">信息: Pausing ProtocolHandler [&quot;ajp-apr-8009&quot;]</div><div class="line">二月 08, 2017 9:03:16 下午 org.apache.catalina.core.StandardService stopInternal</div><div class="line">信息: Stopping service Catalina</div><div class="line">二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol destroy</div><div class="line">信息: Destroying ProtocolHandler [&quot;http-nio-8080&quot;]</div><div class="line">二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol destroy</div><div class="line">严重: Failed to destroy end point associated with ProtocolHandler [&quot;http-nio-8080&quot;]</div><div class="line">java.lang.NullPointerException</div><div class="line">at org.apache.tomcat.util.net.NioEndpoint.releaseCaches(NioEndpoint.java:316)</div><div class="line">at org.apache.tomcat.util.net.NioEndpoint.unbind(NioEndpoint.java:492)</div><div class="line">at org.apache.tomcat.util.net.AbstractEndpoint.destroy(AbstractEndpoint.java:821)</div><div class="line">at org.apache.coyote.AbstractProtocol.destroy(AbstractProtocol.java:534)</div><div class="line">at org.apache.catalina.connector.Connector.destroyInternal(Connector.java:1023)</div><div class="line">at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:297)</div><div class="line">at org.apache.catalina.core.StandardService.destroyInternal(StandardService.java:589)</div><div class="line">at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:297)</div><div class="line">at org.apache.catalina.core.StandardServer.destroyInternal(StandardServer.java:877)</div><div class="line">at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:297)</div><div class="line">at org.apache.catalina.startup.Catalina.start(Catalina.java:633)</div><div class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">at java.lang.reflect.Method.invoke(Unknown Source)</div><div class="line">at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:351)</div><div class="line">at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:485)</div><div class="line"></div><div class="line">二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol destroy</div><div class="line">信息: Destroying ProtocolHandler [&quot;ajp-apr-8009&quot;]</div></pre></td></tr></table></figure></p><p><code>解决</code><br>百度说端口占用，查端口netstat -ano 没有发现8080被占用。<br>干脆重新下载tomcat8，再试一试，不行。<br>tomcat目录/conf/server.xml,修改8080端口<br>之后更改了web.xml中的url-partten，可以运行了。</p><p>新的问题是无法访问。</p><hr><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p><code>bug</code><br>在换了tomcat服务器后，项目很多都报cannot be resolved to a type的问题。</p><p><code>解决</code><br>这是服务器自带的servlet库未导入的原因。<br>右键项目属性，转到Targeted Runtimes，选择一个服务器，例如Tomcat，单击应用，可以解决。</p><hr><h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p><code>bug</code><br>tomcat可以启动了，但是不能访问tomcat主页，不能访问<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a><br><code>解决方法</code><br>终止服务，删除tomcat下的项目，重新publish，双击Servers下的tomcat服务器，在Overview下的server Locations中，选择第二项：Use Tomcat installtion(takes control of Tomcat installation).之前失败时选的是第一项。之后可以访问tomcat主页。解决。</p><hr><h2 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h2><p><code>bug</code><br>可以运行了，但是jsp文件没有样式表，但是已经添加css了。</p><p><code>解决</code><br>之前的都是相对路径，servlet对路径进行过一次跳转，所以要使用绝对路径。<br>绝对路径写法：</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些bug&lt;br&gt;
    
    </summary>
    
      <category term="Diary" scheme="https://think1024.github.io/categories/Diary/"/>
    
    
      <category term="java" scheme="https://think1024.github.io/tags/java/"/>
    
      <category term="bug" scheme="https://think1024.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Hexo总结</title>
    <link href="https://think1024.github.io/2017/02/08/Hexo%E6%80%BB%E7%BB%93/"/>
    <id>https://think1024.github.io/2017/02/08/Hexo总结/</id>
    <published>2017-02-08T08:21:51.879Z</published>
    <updated>2017-09-09T07:49:04.153Z</updated>
    
    <content type="html"><![CDATA[<p>  这是在window10 使用hexo和github搭建博客的总结。这是<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo文档</a> 。</p><a id="more"></a><h2 id="Hexo快速开始"><a href="#Hexo快速开始" class="headerlink" title="Hexo快速开始"></a>Hexo快速开始</h2><p>安装hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo-cli -g</div></pre></td></tr></table></figure></p><p>初始化blog文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> init blog</div></pre></td></tr></table></figure></p><p>可以在本机4000端口访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$hexo generate</div><div class="line">$hexo server</div></pre></td></tr></table></figure><h2 id="Hexo的一些命令"><a href="#Hexo的一些命令" class="headerlink" title="Hexo的一些命令"></a>Hexo的一些命令</h2><p>新建一个文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure></p><p>开启服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p><p>生成静态文件，就是把md变为html文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p><p>发布到github上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p><h2 id="Hexo换主题说明"><a href="#Hexo换主题说明" class="headerlink" title="Hexo换主题说明"></a>Hexo换主题说明</h2><p>把下载的主题放到theme文件夹，更改_config.yml的theme为主题名就ok了，注意空格。<br>之后要清理一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> clean</div><div class="line"><span class="variable">$hexo</span> generate</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  这是在window10 使用hexo和github搭建博客的总结。这是&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot;&gt;Hexo文档&lt;/a&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://think1024.github.io/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://think1024.github.io/tags/Hexo/"/>
    
      <category term="other" scheme="https://think1024.github.io/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://think1024.github.io/2017/02/08/hello-world/"/>
    <id>https://think1024.github.io/2017/02/08/hello-world/</id>
    <published>2017-02-07T16:00:00.000Z</published>
    <updated>2017-09-09T07:48:13.373Z</updated>
    
    <content type="html"><![CDATA[<p>hello world<br><a id="more"></a><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello world&lt;br&gt;
    
    </summary>
    
      <category term="Test" scheme="https://think1024.github.io/categories/Test/"/>
    
    
      <category term="test" scheme="https://think1024.github.io/tags/test/"/>
    
      <category term="demo" scheme="https://think1024.github.io/tags/demo/"/>
    
  </entry>
  
</feed>
