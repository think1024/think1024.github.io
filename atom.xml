<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zero space</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://think1024.github.io/"/>
  <updated>2017-09-02T03:43:26.701Z</updated>
  <id>https://think1024.github.io/</id>
  
  <author>
    <name>Zero</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多线程1 synchronized</title>
    <link href="https://think1024.github.io/2017/09/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B1-synchronized/"/>
    <id>https://think1024.github.io/2017/09/02/多线程1-synchronized/</id>
    <published>2017-09-02T03:32:12.000Z</published>
    <updated>2017-09-02T03:43:26.701Z</updated>
    
    <content type="html"><![CDATA[<h4 id="锁synchronized"><a href="#锁synchronized" class="headerlink" title="锁synchronized"></a>锁synchronized</h4><p>synchronized同步锁的作用范围有2种，分别是对象锁和类锁。</p>
<p>在方法上加<code>synchronized</code>和加代码块<code>synchronized(this)</code>的作用范围都是对象锁。</p>
<p>在静态方法上加<code>synchronized</code>和加代码块<code>synchronized(this)</code>的作用范围是类锁。、</p>
<p>类锁和对象锁之间互不影响，但是类锁和类锁、对象锁和对象锁之间有影响。</p>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>2个同步方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynProsess1</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SynProsess1</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i = <span class="number">10</span>;</div><div class="line">		<span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"test1 : "</span>+ i);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">100</span>);</div><div class="line">				</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;					</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;	</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i = <span class="number">10</span>;</div><div class="line">		<span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"test2 : "</span>+ i);</div><div class="line">            </div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">100</span>);</div><div class="line">				</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;					         </div><div class="line">				 e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;	</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SynProsess1 p1 = <span class="keyword">new</span> SynProsess1(<span class="string">"tom"</span>);</div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				p1.test1();</div><div class="line">		&#125;&#125;);</div><div class="line">		</div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				p1.test2();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//运行结果。这两个方法一个执行完后，另一个才执行。</span></div><div class="line"><span class="comment">//</span></div></pre></td></tr></table></figure></p>
<p>同步方法和类同步代码块<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">///</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">synchronized</span>(SynDemo.class)&#123;</div><div class="line">        <span class="comment">///</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"><span class="comment">//类代码块相当于静态同步方法。</span></div><div class="line"><span class="comment">//test2等价于test3</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;锁synchronized&quot;&gt;&lt;a href=&quot;#锁synchronized&quot; class=&quot;headerlink&quot; title=&quot;锁synchronized&quot;&gt;&lt;/a&gt;锁synchronized&lt;/h4&gt;&lt;p&gt;synchronized同步锁的作用范围有2种，分别
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hibernate-1</title>
    <link href="https://think1024.github.io/2017/03/09/hibernate-1/"/>
    <id>https://think1024.github.io/2017/03/09/hibernate-1/</id>
    <published>2017-03-09T13:22:35.000Z</published>
    <updated>2017-03-09T13:30:50.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-hibernate包导入"><a href="#1-hibernate包导入" class="headerlink" title="1.hibernate包导入"></a>1.hibernate包导入</h2><p>lib/required 下<br>本身没有日志包，需要导入 log4j slf4j</p>
<h2 id="2-配置映射关系"><a href="#2-配置映射关系" class="headerlink" title="2.配置映射关系"></a>2.配置映射关系</h2><p>配置文件的名称和位置没要求，建议在实体类包里面<br>建议名称：<code>名称.hbm.xml</code><br><code>property</code> 中name和column相同时，可以省略column</p>
<h2 id="3-核心配置文件"><a href="#3-核心配置文件" class="headerlink" title="3.核心配置文件"></a>3.核心配置文件</h2><p>位置和名称固定<br>位置：src下<br>名称：hibernate.cfg.xml</p>
<p>配置信息写在<code>&lt;session-factory&gt;</code>标签下<br>hibernate只加载核心配置文件，映射配置文件要在核心文件里配置</p>
<ol>
<li>配置数据库</li>
<li>hibernate配置</li>
<li>加载映射文件</li>
</ol>
<h2 id="4-操作"><a href="#4-操作" class="headerlink" title="4. 操作"></a>4. 操作</h2><ol>
<li>加载hibernate核心配置文件</li>
<li>创建sessionFactory对象</li>
<li>使用sessionFactory创建session对象</li>
<li>开启事务</li>
<li>写crud操作（只有这个不固定）</li>
<li>提交事务</li>
<li>关闭资源</li>
</ol>
<h2 id="5-hibernate的api"><a href="#5-hibernate的api" class="headerlink" title="5.hibernate的api"></a>5.hibernate的api</h2><p>Configuration:<br>找到hibernate.cfg.xml配置文件，并加载到对象里面</p>
<p>SessionFactory:<br>到数据库根据映射关系，创建表<br>每次都要检查，浪费资源<br>一个项目中，创建一个SessionFactory对象</p>
<p>在工具类中，静态代码实现。</p>
<p>Session：<br>类似conncetion<br>实现crud<br>单线程对象，不能共用。</p>
<p>Transaction</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-hibernate包导入&quot;&gt;&lt;a href=&quot;#1-hibernate包导入&quot; class=&quot;headerlink&quot; title=&quot;1.hibernate包导入&quot;&gt;&lt;/a&gt;1.hibernate包导入&lt;/h2&gt;&lt;p&gt;lib/required 下&lt;br&gt;本身没有
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>arch安装</title>
    <link href="https://think1024.github.io/2017/02/22/arch%E5%AE%89%E8%A3%85/"/>
    <id>https://think1024.github.io/2017/02/22/arch安装/</id>
    <published>2017-02-22T12:38:47.000Z</published>
    <updated>2017-02-23T04:43:16.022Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<!-- more -->
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>使用vmware虚拟机安装<br>arch版本：archlinux-2017.02.01-dual.iso<br>新建虚拟机的时候vmware没有检测出archliunx系统，所以就直接选了<code>其他liunx3.x版</code></p>
<h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><h4 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h4><p>archliunx 安装过程需要联网。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ping -c 4 baidu.com</div></pre></td></tr></table></figure></p>
<p>检查网络连接。4是发送4个数据包</p>
<h4 id="建立硬盘分区。"><a href="#建立硬盘分区。" class="headerlink" title="建立硬盘分区。"></a>建立硬盘分区。</h4><p>虚拟机总共分了10G。<br>可以使用fdisk或cfdisk，或其他的都可以。<br>这里用的是cfdisk.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># cfdisk</div></pre></td></tr></table></figure></p>
<p>首先选第一个gpt。<br>new第一个分区，大小1M，type是bios boot，这为后面安装grub准备。<br>new第二个分区，9G。<br>new第三个分区，默认剩余空间。<br>最后write。</p>
<p>一些其它命令：<br>fdisk -l /dev/sda   查看sda的分区。<br>fdisk /dev/sda   进入对sda进行操作的环境<br>n是创建新分区，之后一般默认，分区大小 +1G 等等</p>
<h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><p>将sda1和sda2格式化为ext4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkfs.ext4 /dev/sda1</div><div class="line">mkfs.ext4 /dev/sda2</div></pre></td></tr></table></figure></p>
<p>格式swap分区,激活swap分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkswap /dev/sda3</div><div class="line">swapon /dev/sda3</div></pre></td></tr></table></figure></p>
<p>查看文件系统文件类型<br> <code>file -s /dev/sda1</code></p>
<h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><p>/dev/sda2 挂载到 根目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount /dev/sda2 /mnt</div></pre></td></tr></table></figure></p>
<p>创建/boot,将/dev/sda1挂载到 /boot<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /mnt/boot</div><div class="line">mount /dev/sda1 /mnt/boot</div></pre></td></tr></table></figure></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="选择镜像"><a href="#选择镜像" class="headerlink" title="选择镜像"></a>选择镜像</h4><p>编辑/etc/pacman.d/mirrorlist，将选择的mirror放到最上面，或者把文件备份，源文件只保留需要的mirror<br>修改完后，更新源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pacman -Syy</div></pre></td></tr></table></figure></p>
<h4 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pacstrap -i /mnt base base-devel</div></pre></td></tr></table></figure>
<h4 id="Fstab"><a href="#Fstab" class="headerlink" title="Fstab"></a>Fstab</h4><p>生成系统中的文件系统信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</div></pre></td></tr></table></figure></p>
<h4 id="Chroot"><a href="#Chroot" class="headerlink" title="Chroot"></a>Chroot</h4><p>Change root 到新安装的系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arch-chroot /mnt /bin/bash</div></pre></td></tr></table></figure></p>
<h4 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h4><p>设置标准时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hwclock --systohc --utc</div></pre></td></tr></table></figure></p>
<p>设置语言<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vi /etc/locale.gen</div><div class="line">locale-gen</div><div class="line"></div><div class="line">echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</div></pre></td></tr></table></figure></p>
<p>设置主机名</p>
<p>设置 hostname，将其添加到/etc/hostname。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo myhostname &gt; /etc/hostname</div></pre></td></tr></table></figure></p>
<p>设置root密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd</div></pre></td></tr></table></figure></p>
<h4 id="安装Grub"><a href="#安装Grub" class="headerlink" title="安装Grub"></a>安装Grub</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pacman -S grub</div><div class="line">grub-install --target=i386-pc --recheck /dev/sda</div><div class="line">grub-mkconfig -o /boot/grub/grub.cfg</div></pre></td></tr></table></figure>
<h4 id="卸载分区"><a href="#卸载分区" class="headerlink" title="卸载分区"></a>卸载分区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exit</div><div class="line">umount /mnt</div><div class="line">reboot</div></pre></td></tr></table></figure>
<h4 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h4><h3 id="安装中的问题"><a href="#安装中的问题" class="headerlink" title="安装中的问题"></a>安装中的问题</h3><p>在第一次grub安装时出现错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">grub-install --target=i386-pc /dev/sda</div><div class="line">grub-install: warning: this GPT partition label contains no BIOS Boot Partition; embedding won&apos;t be possible.</div><div class="line">grub-install: warning: Embedding is not possible. GRUB can only be installed in this setup by using blocklists. However, blocklists are UNRELIABLE and their use is discouraged..</div><div class="line">grub-install: error: will not proceed with blocklists.</div></pre></td></tr></table></figure></p>
<p>解决方法<br>之前在分区的时候，没有首先分一个1M大小的<code>bios boot</code>类型分区，导致grub安装失败。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;使用vmware虚拟机安装&lt;br&gt;arch版本：archlinux-2017
    
    </summary>
    
      <category term="linux" scheme="https://think1024.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://think1024.github.io/tags/linux/"/>
    
      <category term="arch" scheme="https://think1024.github.io/tags/arch/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记1</title>
    <link href="https://think1024.github.io/2017/02/09/Java%E7%AC%94%E8%AE%B01/"/>
    <id>https://think1024.github.io/2017/02/09/Java笔记1/</id>
    <published>2017-02-09T06:23:46.000Z</published>
    <updated>2017-02-23T04:43:41.957Z</updated>
    
    <content type="html"><![CDATA[<p>java学习遇到的一些bug</p>
<h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p><code>问题</code><br>今天学习Mybatis，tomcat8运行时错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol pause</div><div class="line">信息: Pausing ProtocolHandler [&quot;http-nio-8080&quot;]</div><div class="line">二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol pause</div><div class="line">信息: Pausing ProtocolHandler [&quot;ajp-apr-8009&quot;]</div><div class="line">二月 08, 2017 9:03:16 下午 org.apache.catalina.core.StandardService stopInternal</div><div class="line">信息: Stopping service Catalina</div><div class="line">二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol destroy</div><div class="line">信息: Destroying ProtocolHandler [&quot;http-nio-8080&quot;]</div><div class="line">二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol destroy</div><div class="line">严重: Failed to destroy end point associated with ProtocolHandler [&quot;http-nio-8080&quot;]</div><div class="line">java.lang.NullPointerException</div><div class="line">	at org.apache.tomcat.util.net.NioEndpoint.releaseCaches(NioEndpoint.java:316)</div><div class="line">	at org.apache.tomcat.util.net.NioEndpoint.unbind(NioEndpoint.java:492)</div><div class="line">	at org.apache.tomcat.util.net.AbstractEndpoint.destroy(AbstractEndpoint.java:821)</div><div class="line">	at org.apache.coyote.AbstractProtocol.destroy(AbstractProtocol.java:534)</div><div class="line">	at org.apache.catalina.connector.Connector.destroyInternal(Connector.java:1023)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:297)</div><div class="line">	at org.apache.catalina.core.StandardService.destroyInternal(StandardService.java:589)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:297)</div><div class="line">	at org.apache.catalina.core.StandardServer.destroyInternal(StandardServer.java:877)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:297)</div><div class="line">	at org.apache.catalina.startup.Catalina.start(Catalina.java:633)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">	at java.lang.reflect.Method.invoke(Unknown Source)</div><div class="line">	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:351)</div><div class="line">	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:485)</div><div class="line"></div><div class="line">二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol destroy</div><div class="line">信息: Destroying ProtocolHandler [&quot;ajp-apr-8009&quot;]</div></pre></td></tr></table></figure></p>
<p><code>解决</code><br>百度说端口占用，查端口netstat -ano 没有发现8080被占用。<br>干脆重新下载tomcat8，再试一试，不行。<br>tomcat目录/conf/server.xml,修改8080端口<br>之后更改了web.xml中的url-partten，可以运行了。</p>
<p>新的问题是无法访问。</p>
<hr>
<h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p><code>bug</code><br>在换了tomcat服务器后，项目很多都报cannot be resolved to a type的问题。</p>
<p><code>解决</code><br>这是服务器自带的servlet库未导入的原因。<br>右键项目属性，转到Targeted Runtimes，选择一个服务器，例如Tomcat，单击应用，可以解决。</p>
<hr>
<h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p><code>bug</code><br>tomcat可以启动了，但是不能访问tomcat主页，不能访问<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a><br><code>解决方法</code><br>终止服务，删除tomcat下的项目，重新publish，双击Servers下的tomcat服务器，在Overview下的server Locations中，选择第二项：Use Tomcat installtion(takes control of Tomcat installation).之前失败时选的是第一项。之后可以访问tomcat主页。解决。</p>
<hr>
<h2 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h2><p><code>bug</code><br>可以运行了，但是jsp文件没有样式表，但是已经添加css了。</p>
<p><code>解决</code><br>之前的都是相对路径，servlet对路径进行过一次跳转，所以要使用绝对路径。<br>绝对路径写法：</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java学习遇到的一些bug&lt;/p&gt;
&lt;h2 id=&quot;问题1&quot;&gt;&lt;a href=&quot;#问题1&quot; class=&quot;headerlink&quot; title=&quot;问题1&quot;&gt;&lt;/a&gt;问题1&lt;/h2&gt;&lt;p&gt;&lt;code&gt;问题&lt;/code&gt;&lt;br&gt;今天学习Mybatis，tomcat8运行时错误。
    
    </summary>
    
      <category term="Diary" scheme="https://think1024.github.io/categories/Diary/"/>
    
    
      <category term="java" scheme="https://think1024.github.io/tags/java/"/>
    
      <category term="bug" scheme="https://think1024.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Hexo总结</title>
    <link href="https://think1024.github.io/2017/02/08/Hexo%E6%80%BB%E7%BB%93/"/>
    <id>https://think1024.github.io/2017/02/08/Hexo总结/</id>
    <published>2017-02-08T08:21:51.879Z</published>
    <updated>2017-02-23T04:42:58.227Z</updated>
    
    <content type="html"><![CDATA[<p>  这是在window10 使用hexo和github搭建博客的总结。这是<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo文档</a> 。</p>
<h2 id="Hexo快速开始"><a href="#Hexo快速开始" class="headerlink" title="Hexo快速开始"></a>Hexo快速开始</h2><p>安装hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo-cli -g</div></pre></td></tr></table></figure></p>
<p>初始化blog文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> init blog</div></pre></td></tr></table></figure></p>
<p>可以在本机4000端口访问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$hexo generate</div><div class="line">$hexo server</div></pre></td></tr></table></figure>
<h2 id="Hexo的一些命令"><a href="#Hexo的一些命令" class="headerlink" title="Hexo的一些命令"></a>Hexo的一些命令</h2><p>新建一个文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure></p>
<p>开启服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<p>生成静态文件，就是把md变为html文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p>
<p>发布到github上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<h2 id="Hexo换主题说明"><a href="#Hexo换主题说明" class="headerlink" title="Hexo换主题说明"></a>Hexo换主题说明</h2><p>把下载的主题放到theme文件夹，更改_config.yml的theme为主题名就ok了，注意空格。<br>之后要清理一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> clean</div><div class="line"><span class="variable">$hexo</span> generate</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  这是在window10 使用hexo和github搭建博客的总结。这是&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo文档&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;Hexo快速
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://think1024.github.io/2017/02/08/hello-world/"/>
    <id>https://think1024.github.io/2017/02/08/hello-world/</id>
    <published>2017-02-07T16:00:00.000Z</published>
    <updated>2017-02-23T04:43:02.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a h
    
    </summary>
    
      <category term="Test" scheme="https://think1024.github.io/categories/Test/"/>
    
    
      <category term="test" scheme="https://think1024.github.io/tags/test/"/>
    
      <category term="demo" scheme="https://think1024.github.io/tags/demo/"/>
    
  </entry>
  
</feed>
