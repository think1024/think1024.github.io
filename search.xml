<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Java 实现 TCP/UDP client and server]]></title>
      <url>%2F2017%2F11%2F03%2FJava-%E5%AE%9E%E7%8E%B0-TCP-UDP-client-and-server%2F</url>
      <content type="text"><![CDATA[Java实现 TCP/UDP client和Server。 对于TCP Server有2个服务，一个生成4个随机字母，一个返回日期。 对于UDP Server，接收client发送的ip，然后会读取一个文件，文件中每一行是一条ip和houstName的对应的记录， 然后返回hostname. TCP首先是TCP客户端123456789101112131415161718192021222324252627282930313233343536public class TCPClient &#123; private String host = "127.0.0.1"; private int port = 20018; private void getService() &#123; try &#123; Socket socket = new Socket(host,port); System.out.println("建立连接"); try &#123; DataInputStream in = new DataInputStream(socket.getInputStream()); DataOutputStream out = new DataOutputStream(socket.getOutputStream()); Scanner scanner = new Scanner(System.in); while(true) &#123; out.writeUTF(scanner.nextLine()); System.out.println("server =&gt; "+in.readUTF()); &#125; &#125;finally &#123; socket.close(); System.out.println("关闭连接"); &#125; &#125; catch (Exception e) &#123; System.out.println("服务端关闭连接"); &#125; &#125; public static void main(String[] args) &#123; new TCPClient().getService(); &#125;&#125; TCP服务端123456789101112131415161718192021222324public class TCPServer &#123; private int port = 20018; public static void main(String[] args) &#123; new TCPServer().service(); &#125; //2种服务，1是随机4个字母，2是当前时间 public void service() &#123; try &#123; ServerSocket server = new ServerSocket(port); System.out.println("started ..."); while(true) &#123; Socket socket = server.accept(); //接收一个请求后，就创建一个线程 TCPServerThread st = new TCPServerThread(socket); new Thread(st).start(); &#125; &#125; catch (IOException e) &#123; &#125; &#125;&#125; TCPServerThread12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class TCPServerThread implements Runnable&#123; private Socket socket; private int port= 20018; public TCPServerThread(Socket socket) &#123; this.socket = socket; &#125; @Override public void run() &#123; System.out.println("新加入1个连接..."); try &#123; try &#123; DataInputStream in = new DataInputStream(socket.getInputStream()); DataOutputStream out = new DataOutputStream(socket.getOutputStream()); while(true) &#123; String req = in.readUTF(); if(req.equals("q")) &#123; //断开连接 break; &#125; String resp = null; switch(req) &#123; case "1": resp = generate4char(); break; case "2": resp = new Date().toString(); break; default : resp ="请输入1或2,退出输入q"; break; &#125; out.writeUTF(resp); &#125; &#125; finally &#123; System.out.println("关闭1个连接..."); socket.close(); &#125; &#125; catch (IOException e) &#123; &#125; &#125; //返回随机生成的4个字母 private String generate4char() &#123; Random r = new Random(); char c1 = (char)(r.nextInt(26)+97); char c2 = (char)(r.nextInt(26)+97); char c3 = (char)(r.nextInt(26)+97); char c4 = (char)(r.nextInt(26)+97); return new String(""+c1+c2+c3+c4); &#125;&#125; UDPUDP和TCP有些区别，Socket变成了报文Socket，DatagramSocket，接收的数据不再是流，变成了DatagramPacket。 UDPClient1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class UDPClient &#123; private static int port = 20020; public static void main(String[] args) &#123; new UDPClient().getService(); &#125; public void getService() &#123; DatagramSocket socket = null; try &#123; InetAddress addr = InetAddress.getByName("127.0.0.1"); System.out.println("请输入hostname:"); //从命令行读取数据 Scanner scanner = new Scanner(System.in); String str = scanner.nextLine(); byte[] data = str.getBytes(); socket = new DatagramSocket(); //发送数据 DatagramPacket packet = new DatagramPacket(data, data.length,addr,port); socket.send(packet); //接收数据 byte[] data2 = new byte[1024]; DatagramPacket packet2 = new DatagramPacket(data2, data2.length); socket.receive(packet2); //显示接收的数据 String info = new String(data2); System.out.println(info); &#125; catch (Exception e) &#123; System.out.println("遇到错误"); &#125; finally &#123; if(socket != null ) &#123; socket.close(); &#125; &#125; &#125; &#125; UDPServer1234567891011121314151617181920212223242526272829303132333435363738public class UDPServer &#123; private static int port = 20020; public static void main(String[] args) &#123; new UDPServer().service(); &#125; //client发送ip，返回hostname public void service() &#123; DatagramSocket socket = null; try &#123; socket = new DatagramSocket(port); byte[] data = new byte[1024]; System.out.println("started..."); //服务开启后一直运行 while(true) &#123; DatagramPacket packet = new DatagramPacket(data,0,data.length); socket.receive(packet); //接收一个请求后，就创建一个线程 UDPServerThread thread = new UDPServerThread(socket, packet, data); new Thread(thread).start(); &#125; &#125; catch (SocketException e) &#123; e.printStackTrace(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; if(socket != null) &#123; socket.close(); &#125; System.out.println("end..."); &#125; &#125;&#125; UDPServerThread12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class UDPServerThread implements Runnable &#123; private DatagramSocket socket; private DatagramPacket packet; private byte[] data; public UDPServerThread(DatagramSocket socket,DatagramPacket packet,byte[] data) &#123; this.socket = socket; this.packet = packet; this.data = data; &#125; @Override public void run() &#123; //接收数据,将数据放到data里面 String info = new String(data,0,data.length); String resp = getHostname(info); //发送数据到客户端 InetAddress addr = packet.getAddress(); int pt = packet.getPort(); byte[] dt = resp.getBytes(); DatagramPacket pkt = new DatagramPacket(dt,dt.length,addr,pt); try &#123; socket.send(pkt); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; private String getHostname(String info) &#123; info = info.trim(); File file = new File("hostname.txt"); try &#123; BufferedReader br = new BufferedReader(new FileReader(file)); String line = null; while((line = br.readLine()) != null ) &#123; String[] record = line.trim().split("\\s+");// hostname 和ip,空格分隔 if(record[0].trim().equals(info) ) &#123; return record[1]; &#125; &#125; &#125; catch (FileNotFoundException fe) &#123; System.out.println("没找到文件 "); &#125; catch (IOException ioe) &#123; &#125; return "not found"; &#125;&#125; 通过上面的代码可以看出TCP和UDP的一些区别，TCP是面向连接的，UDP是不连接的，TCP是字节流，UDP是报文。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[clojure note1]]></title>
      <url>%2F2017%2F09%2F21%2Fclojure-note1%2F</url>
      <content type="text"><![CDATA[clojure练习中的一些函数。 1. vec vector list1234( = [ :a :b :c] ( list :a :b :c ) ( vec ' ( :a :b :c ) ) ( vector :a :b :c ) ) 2. conj 加入列表 vector 和 list 顺序不同，list在前面，vector在后面 conj set 没有顺序 3. set 没有重复的 {} 123#&#123;1 2 3 4&#125;(set '(1 2 3 4)) 4. map 123(def maap &#123;:a 1,:b 2&#125;);(:a maap) 等于 (maap :a) 前面后面都一样。 5. rest1;返回除了第一个剩下的，格式为list 6. map12(map fn sequence);sequence 可以是list vector set 7. 循环 recur loop 1234567;累加器(defn fun [sum x] (if (pos? x) (recur (+ sum x) (dec x)) sum )) 8. drop n seq1234(drop 3 [1 2 3 4 5 6]);=&gt;(4 5 6);去掉seq的前n个 9. 斐波那契数列123456#(take % ((fn fib [] (lazy-cat [1 1] (map + (fib) (rest (fib))) ))) 10. lazy-cat11. apply将参数以list形式传给func，执行。 123(defn func [a b c d] ())(apply func [] arg0 arg1 arg2 arg3]) 12 re-seq 正则1234(re-seq #"[A-Z]" "abAB");=&gt;("A" "B");使用#"[A-Z]"来作为 pattern 13 partition-by令func 作用与 seq ，将连续的结果相同的一部分分为一组1(partition-by func seq)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Map.Entry使用]]></title>
      <url>%2F2017%2F09%2F21%2FMap-Entry%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[关于Map.Entry的使用。Map.Entry相当于把Map的Key和Value放在一个对象里面。遍历的时候，不用再根据keySet的key，使用额外的一次map.getKey()来获得value。提高了效率。 如果只需要ValueSet的话，只需要foreach就可以了。 几种方法的比较。123456789101112131415161718192021HashMap&lt;Object,Object&gt; map = new HashMap&lt;Object,Object&gt;();//最原始的方法Iterator iterator = map.keySet().iterator();while(iterator.hasNext()) &#123; Object key = iterator.next(); Object val = map.get(key); //....&#125;//使用foreach方法for(Object key:map.keySet()) &#123; Object val = map.get(key); //....&#125;//使用map.entryfor(Entry&lt;Object,Object&gt; entry: map.entrySet()) &#123; entry.getKey(); entry.getValue();&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[java 多维数组]]></title>
      <url>%2F2017%2F09%2F17%2Fjava-%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%2F</url>
      <content type="text"><![CDATA[java的多维数组是靠一维数组实现的。 多维数组可以看作是元素为数组的数组。比如arr[][],arr[] 的元素为数组的引用，可以说arr[]的元素就是二级数组的指针。 arr的第二维数组元素的长度都是随意的。123456789int[][] arr = new int[2][];//第一个数2是必须的。arr[0] = new int[2]; //长度为2arr[1] = new int[4]; //长度为4 for(int i = 0;i&lt; arr.length;i++)&#123; for(int j = 0;j&lt;arr[i].length; j++)&#123; System.out.println("arr["+i+"]["+j+"] = "+ arr[i][j]); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[java 集合框架 1]]></title>
      <url>%2F2017%2F09%2F17%2Fjava-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-1%2F</url>
      <content type="text"><![CDATA[java Collection 中的 ArrayList 、LinkedList 、ArrayDeque。 ArrayList从名字可以看出是一个数组List，如果数组满了，在申请一个更大的数组，然后将原来的数据复制过去。新申请的空间是原来的3倍。 add()添加时，如果没有空间，需要自动扩容。123456789private void grow(int minCapacity) &#123; int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);//新空间是原来的3倍 if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); elementData = Arrays.copyOf(elementData, newCapacity);//扩展空间并复制&#125; remove(int index)后，后面的元素都要向前移动。remove(Object o)时，删除第一个满足条件的。 当删除元素并移动后，最后一个位置要赋值为null，让GC起作用。不删除就不垃圾回收了吗？数组里面存储的只是对象的引用，对象实际都在堆中，只有堆中的对象没有被引用，GC才会起作用。12345678910public E remove(int index) &#123; rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved &gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; //清除该位置的引用，让GC起作用 return oldValue;&#125; 上面的 System.arraycopy()是native方法，使用的是内存复制，对于大量数据时，效率比较高。 LinkListlinkList是双向链表,实现了List&lt;E&gt;, Deque&lt;E&gt;接口，等同Queue和Stack的功能。有一个内部类Node,链表由Node组成，每个Node有一个指向前一个节点的指针和指向后一个节点的指针。 对于栈和队列，首选是ArrayDeque, 其次是LinkedList。 ArrayDeque实现了Deque 接口。Deque接口的含义是double ended queue，双端队列，既能当Stack，又能当Queue,和LinkedList功能差不多，只不过一个是链表，一个是数组。 内部实现使用的是 循环数组，数组的最前面和最后面连接起来。例如，当压入堆栈时，前面没有空间了，在逻辑上，把后面接到前面，从最后继续。这里的处理下标越界的代码很好。1234567public void addFirst(E e) &#123; if (e == null) throw new NullPointerException(); elements[head = (head - 1) &amp; (elements.length - 1)] = e;//处理下标越界 if (head == tail)//空间不够用 doubleCapacity();//扩容&#125; elements.length是2的倍数，和head-1 &amp; 操作，相当于对 head-1 取余。 当删除并返回deque的head处的元素时，也要处理下标问题。12345678public E pollFirst() &#123; E result = elements[head]; if (result == null)//null值意味着deque为空 return null; elements[h] = null;//let GC work head = (head + 1) &amp; (elements.length - 1);//这里的是 head+1 return result;&#125; 当没有空间时，将重新申请一个2倍的数组，并将循环数组的数据分为连续的两次复制到新数组中。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[RESTful]]></title>
      <url>%2F2017%2F09%2F10%2FRESTful%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[java Lambda表达式]]></title>
      <url>%2F2017%2F09%2F10%2FLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[关于 lambda表达式。 Lambda表达式Lambda表达式就是将函数作为参数传给另一个函数（方法）。因为有时候有的函数方法只会使用一次，单独拿出来声明意义不大，最好将其作为匿名函数直接使用。Lambda使用 -&gt; ，参数 -&gt; 代码块。参数类型编译器会自己推断。如果代码块只有一行，可以省略{} 和 return。123456Arrays.asList("a","b","c","d").forEach( e -&gt;&#123; System.out.println(e) System.out.println(e) &#125;);Arrays.asList("a","b","c","d").sort((e1,e2) -&gt; e1.compareTo(e2)); ##]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[clojure学习 1]]></title>
      <url>%2F2017%2F09%2F04%2Fclojure%E5%AD%A6%E4%B9%A0-1%2F</url>
      <content type="text"><![CDATA[clojure学习1 1. vec vector list1234( = [ :a :b :c] ( list :a :b :c ) ( vec ' ( :a :b :c ) ) ( vector :a :b :c ) ) 2. conj 加入列表 vector 和 list 顺序不同，list在前面，vector在后面 conj set 没有顺序 3. set 没有重复的 {} 123#&#123;1 2 3 4&#125;(set '(1 2 3 4)) 4. map 123(def maap &#123;:a 1,:b 2&#125;);(:a maap) 等于 (maap :a) 前面后面都一样。 5. rest1;返回除了第一个剩下的，格式为list 6. map12(map fn sequence);sequence 可以是list vector set 7. 循环 recur loop 1234567;累加器(defn fun [sum x] (if (pos? x) (recur (+ sum x) (dec x)) sum )) 8. drop n seq1234(drop 3 [1 2 3 4 5 6]);=&gt;(4 5 6);去掉seq的前n个]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[多线程2 Runnable&Thread]]></title>
      <url>%2F2017%2F09%2F02%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B2-Runnable-Thread%2F</url>
      <content type="text"><![CDATA[runnable &amp; Thread thread 和 runnable 的区别1. 避免单继承的限制。Thread实现了Runnable的接口，继承了Thread的类不能继承其他类了。 2. 共享资源。在Thread中，一个Thread 如果 start() 多次，会错误。 123Thread1 t1 = new Thread1("a");t1.start();t2.start(); 在实现Runnable时，一个可以start() 多次。123MyThread t = new MyThread("a");new Thread(t).start();new Thread(t).start(); 所以实现了资源共享。 Thread.join()join的意思是参加，thread1.join()意思是线程thread1参加进来。如果thread2正在执行，在thread2 里面调用thread1.join(), thread2 就会等thread1执行完后再执行。 Thread.yield()Thread.yield()会让当前线程暂停，进入可运行状态，然后线程调度程序从 处于可运行状态的线程中选择一个执行。 有可能一个线程yield()之后，被再一次选中执行。 wait() notify()wait()和notify()是Object的方法。 sleep()和yield()是Thread的方法。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[多线程1 synchronized]]></title>
      <url>%2F2017%2F09%2F02%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B1-synchronized%2F</url>
      <content type="text"><![CDATA[synchronized记录 锁synchronizedsynchronized同步锁的作用范围有2种，分别是对象锁和类锁。 在方法上加synchronized和加代码块synchronized(this)的作用范围都是对象锁。 在静态方法上加synchronized和加代码块synchronized(this)的作用范围是类锁。、 类锁和对象锁之间互不影响，但是类锁和类锁、对象锁和对象锁之间有影响。 举例2个同步方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class SynProsess1 &#123; private String name; public SynProsess1(String name) &#123; this.name = name; &#125; public synchronized void test1() &#123; int i = 10; while(i-- &gt; 0) &#123; System.out.println("test1 : "+ i); try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; public synchronized void test2() &#123; int i = 10; while(i-- &gt; 0) &#123; System.out.println("test2 : "+ i); try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; public static void main(String[] args) &#123; SynProsess1 p1 = new SynProsess1("tom"); Thread t1 = new Thread(new Runnable()&#123; public void run() &#123; p1.test1(); &#125;&#125;); Thread t2 = new Thread(new Runnable() &#123; public void run() &#123; p1.test2(); &#125; &#125;); t1.start(); t2.start(); &#125;&#125;//运行结果。这两个方法一个执行完后，另一个才执行。// 同步方法和类同步代码块1234567891011public synchronized void test1()&#123; ///&#125;public void test2()&#123; synchronized(SynDemo.class)&#123; /// &#125;&#125;public static synchronized void test3()&#123;&#125;//类代码块相当于静态同步方法。//test2等价于test3]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hibernate-1]]></title>
      <url>%2F2017%2F03%2F09%2Fhibernate-1%2F</url>
      <content type="text"><![CDATA[一些 hibernate问题 1.hibernate包导入lib/required 下本身没有日志包，需要导入 log4j slf4j 2.配置映射关系配置文件的名称和位置没要求，建议在实体类包里面建议名称：名称.hbm.xmlproperty 中name和column相同时，可以省略column 3.核心配置文件位置和名称固定位置：src下名称：hibernate.cfg.xml 配置信息写在&lt;session-factory&gt;标签下hibernate只加载核心配置文件，映射配置文件要在核心文件里配置 配置数据库 hibernate配置 加载映射文件 4. 操作 加载hibernate核心配置文件 创建sessionFactory对象 使用sessionFactory创建session对象 开启事务 写crud操作（只有这个不固定） 提交事务 关闭资源 5.hibernate的apiConfiguration:找到hibernate.cfg.xml配置文件，并加载到对象里面 SessionFactory:到数据库根据映射关系，创建表每次都要检查，浪费资源一个项目中，创建一个SessionFactory对象 在工具类中，静态代码实现。 Session：类似conncetion实现crud单线程对象，不能共用。 Transaction]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[arch安装]]></title>
      <url>%2F2017%2F02%2F22%2Farch%E5%AE%89%E8%A3%85%2F</url>
      <content type="text"><![CDATA[arch安装记录 环境使用vmware虚拟机安装arch版本：archlinux-2017.02.01-dual.iso新建虚拟机的时候vmware没有检测出archliunx系统，所以就直接选了其他liunx3.x版 安装前准备网络连接archliunx 安装过程需要联网。1# ping -c 4 baidu.com 检查网络连接。4是发送4个数据包 建立硬盘分区。虚拟机总共分了10G。可以使用fdisk或cfdisk，或其他的都可以。这里用的是cfdisk.1# cfdisk 首先选第一个gpt。new第一个分区，大小1M，type是bios boot，这为后面安装grub准备。new第二个分区，9G。new第三个分区，默认剩余空间。最后write。 一些其它命令：fdisk -l /dev/sda 查看sda的分区。fdisk /dev/sda 进入对sda进行操作的环境n是创建新分区，之后一般默认，分区大小 +1G 等等 格式化将sda1和sda2格式化为ext412mkfs.ext4 /dev/sda1mkfs.ext4 /dev/sda2 格式swap分区,激活swap分区12mkswap /dev/sda3swapon /dev/sda3 查看文件系统文件类型 file -s /dev/sda1 挂载分区/dev/sda2 挂载到 根目录1mount /dev/sda2 /mnt 创建/boot,将/dev/sda1挂载到 /boot12mkdir /mnt/bootmount /dev/sda1 /mnt/boot 安装选择镜像编辑/etc/pacman.d/mirrorlist，将选择的mirror放到最上面，或者把文件备份，源文件只保留需要的mirror修改完后，更新源1pacman -Syy 安装系统1pacstrap -i /mnt base base-devel Fstab生成系统中的文件系统信息1genfstab -U /mnt &gt;&gt; /mnt/etc/fstab ChrootChange root 到新安装的系统1arch-chroot /mnt /bin/bash 系统配置设置标准时间1hwclock --systohc --utc 设置语言1234vi /etc/locale.genlocale-genecho LANG=en_US.UTF-8 &gt; /etc/locale.conf 设置主机名 设置 hostname，将其添加到/etc/hostname。1echo myhostname &gt; /etc/hostname 设置root密码1passwd 安装Grub123pacman -S grubgrub-install --target=i386-pc --recheck /dev/sdagrub-mkconfig -o /boot/grub/grub.cfg 卸载分区123exitumount /mntreboot 安装成功安装中的问题在第一次grub安装时出现错误1234grub-install --target=i386-pc /dev/sdagrub-install: warning: this GPT partition label contains no BIOS Boot Partition; embedding won&apos;t be possible.grub-install: warning: Embedding is not possible. GRUB can only be installed in this setup by using blocklists. However, blocklists are UNRELIABLE and their use is discouraged..grub-install: error: will not proceed with blocklists. 解决方法之前在分区的时候，没有首先分一个1M大小的bios boot类型分区，导致grub安装失败。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java笔记1]]></title>
      <url>%2F2017%2F02%2F09%2FJava%E7%AC%94%E8%AE%B01%2F</url>
      <content type="text"><![CDATA[一些bugjava学习遇到的一些bug 问题1问题今天学习Mybatis，tomcat8运行时错误。12345678910111213141516171819202122232425262728293031二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol pause信息: Pausing ProtocolHandler [&quot;http-nio-8080&quot;]二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol pause信息: Pausing ProtocolHandler [&quot;ajp-apr-8009&quot;]二月 08, 2017 9:03:16 下午 org.apache.catalina.core.StandardService stopInternal信息: Stopping service Catalina二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol destroy信息: Destroying ProtocolHandler [&quot;http-nio-8080&quot;]二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol destroy严重: Failed to destroy end point associated with ProtocolHandler [&quot;http-nio-8080&quot;]java.lang.NullPointerException at org.apache.tomcat.util.net.NioEndpoint.releaseCaches(NioEndpoint.java:316) at org.apache.tomcat.util.net.NioEndpoint.unbind(NioEndpoint.java:492) at org.apache.tomcat.util.net.AbstractEndpoint.destroy(AbstractEndpoint.java:821) at org.apache.coyote.AbstractProtocol.destroy(AbstractProtocol.java:534) at org.apache.catalina.connector.Connector.destroyInternal(Connector.java:1023) at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:297) at org.apache.catalina.core.StandardService.destroyInternal(StandardService.java:589) at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:297) at org.apache.catalina.core.StandardServer.destroyInternal(StandardServer.java:877) at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:297) at org.apache.catalina.startup.Catalina.start(Catalina.java:633) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:351) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:485)二月 08, 2017 9:03:16 下午 org.apache.coyote.AbstractProtocol destroy信息: Destroying ProtocolHandler [&quot;ajp-apr-8009&quot;] 解决百度说端口占用，查端口netstat -ano 没有发现8080被占用。干脆重新下载tomcat8，再试一试，不行。tomcat目录/conf/server.xml,修改8080端口之后更改了web.xml中的url-partten，可以运行了。 新的问题是无法访问。 问题2bug在换了tomcat服务器后，项目很多都报cannot be resolved to a type的问题。 解决这是服务器自带的servlet库未导入的原因。右键项目属性，转到Targeted Runtimes，选择一个服务器，例如Tomcat，单击应用，可以解决。 问题3bugtomcat可以启动了，但是不能访问tomcat主页，不能访问http://localhost:8080解决方法终止服务，删除tomcat下的项目，重新publish，双击Servers下的tomcat服务器，在Overview下的server Locations中，选择第二项：Use Tomcat installtion(takes control of Tomcat installation).之前失败时选的是第一项。之后可以访问tomcat主页。解决。 问题4bug可以运行了，但是jsp文件没有样式表，但是已经添加css了。 解决之前的都是相对路径，servlet对路径进行过一次跳转，所以要使用绝对路径。绝对路径写法：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo总结]]></title>
      <url>%2F2017%2F02%2F08%2FHexo%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[这是在window10 使用hexo和github搭建博客的总结。这是Hexo文档 。 Hexo快速开始安装hexo1$npm install hexo-cli -g 初始化blog文件夹1$hexo init blog 可以在本机4000端口访问 12$hexo generate$hexo server Hexo的一些命令新建一个文件1$ hexo new "My New Post" 开启服务1$ hexo server 生成静态文件，就是把md变为html文件1$ hexo generate 发布到github上1$ hexo deploy Hexo换主题说明把下载的主题放到theme文件夹，更改_config.yml的theme为主题名就ok了，注意空格。之后要清理一下12$hexo clean$hexo generate]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F02%2F08%2Fhello-world%2F</url>
      <content type="text"><![CDATA[hello worldWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
